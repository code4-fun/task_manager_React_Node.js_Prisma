generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?
  tasks       Task[]
  user        User    @relation(fields: [userId], references: [id])
  userId      String
}

model Task {
  id          String    @id @default(uuid())
  number      Int       @unique @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  completedAt DateTime?
  priority    Priority  @default(MEDIUM)
  comments    Comment[]
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  subtasks    Subtask[]
  files       File[]
  order       Int
}

model File {
  id     String @id @default(uuid())
  name   String
  path   String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Subtask {
  id          String  @id @default(uuid())
  description String
  completed   Boolean
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
}

model Board {
  id     String @id @default(uuid())
  status Status
  order  Int
  tasks  Task[]
}

model User {
  id       String    @id @default(uuid())
  name     String
  projects Project[]
  comments Comment[]
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  Queue
  Development
  Done
}
